import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
FEEDBACK_RECEIVER_ID = int(os.getenv("FEEDBACK_RECEIVER_ID", "0"))

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_languages = {}
user_histories = {}
awaiting_feedback = set()

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
SYSTEM_PROMPT_RU = (
    "–¢—ã —Ç—ë–ø–ª—ã–π, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ 12 —à–∞–≥–∞–º —Å —Ç–æ–Ω–æ–º –∑–∞–±–æ—Ç–ª–∏–≤–æ–≥–æ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞. "
    "–ü–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –≥–ª—É–±–∂–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ —à–∞–≥–∏ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è, –Ω–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—à—å –¥–ª–∏–Ω–Ω—ã–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è. "
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–π —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, —á—Ç–æ —Ç–∞–∫–æ–µ —à–∞–≥–∏ ‚Äî –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤—Ä–æ–¥–µ:\n"
    "- –° –∫–∞–∫–∏–º —à–∞–≥–æ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å?\n"
    "- –•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–ª–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π?\n"
    "- –ö–∞–∫ –∏–º–µ–Ω–Ω–æ —è –º–æ–≥—É –±—ã—Ç—å —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω —Å–µ–π—á–∞—Å?\n"
    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –∑–∞–ø—Ä–æ—Å—É. –î–∞—ë—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, guiding questions, –∏ Insight ‚Üí –ü—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω—É–∂–Ω–æ."
)

SYSTEM_PROMPT_EN = (
    "You are a warm, attentive 12-step sponsor with the voice of a thoughtful therapist. "
    "You help users explore their recovery journey, but never start with long introductions. "
    "Instead, you ask clarifying questions like:\n"
    "- What step would you like to work on?\n"
    "- Would you like help with examples or phrasing?\n"
    "- How can I support you best right now?\n"
    "Be brief, grounded, and respectful. Use examples, guiding prompts, and Insight ‚Üí Example only when helpful."
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
GREETING_TEXT_RU = (
    "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ 12 —à–∞–≥–∞–º. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å —à–∞–≥–∏ üòä\n\n"
    "–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ö–∞–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ ... —Ç–æ—á–∫—É –≤ ... —à–∞–≥–µ?\" –∏ —è —Ç–µ–±–µ —Å —ç—Ç–∏–º –ø–æ–º–æ–≥—É."
)
GREETING_TEXT_EN = (
    "Hi, I'm a 12-step sponsor bot here to help you work through the steps. üòä\n\n"
    "You can ask things like: \"What are some answer examples for ... in step ...?\" and I‚Äôll help you."
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await language(update, context)

async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üó£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Please choose a language:", reply_markup=reply_markup)

async def language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data
    user_id = query.from_user.id
    user_languages[user_id] = lang
    user_histories.pop(user_id, None)

    if lang == "lang_ru":
        await query.edit_message_text(GREETING_TEXT_RU)
    else:
        await query.edit_message_text(GREETING_TEXT_EN)

async def examples_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, –ø–æ –∫–∞–∫–æ–º—É —à–∞–≥—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã ‚Äî –∏ —è –∏—Ö –ø—Ä–µ–¥–ª–æ–∂—É.")

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_languages.pop(user_id, None)
    user_histories.pop(user_id, None)
    awaiting_feedback.discard(user_id)
    await update.message.reply_text("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞. –° –∫–∞–∫–∏–º —à–∞–≥–æ–º –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""üí¨ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:
–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏, —Å —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ ¬´–ü–æ–º–æ–≥–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫ 4 —à–∞–≥—É¬ª
‚Ä¢ ¬´–Ø –±–æ—é—Å—å –±—ã—Ç—å –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç—ã–º ‚Äî –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å?¬ª

üìå –ö–æ–º–∞–Ω–¥—ã:
/language ‚Äì –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
/start ‚Äì –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
/examples ‚Äì –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –ø—Ä–∏–º–µ—Ä–∞–º
/reset ‚Äì –Ω–∞—á–∞—Ç—å —Å –Ω—É–ª—è
/help ‚Äì –ø–æ–º–æ—â—å
/about ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/feedback ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∞–≤—Ç–æ—Ä—É –±–æ—Ç–∞""")

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""üß† –Ø –±–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ 12 —à–∞–≥–∞–º. –†–∞–±–æ—Ç–∞—é –Ω–∞ –±–∞–∑–µ Claude 3 Haiku —á–µ—Ä–µ–∑ OpenRouter.

–ü–æ–º–æ–≥–∞—é —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏, –æ—Å–º—ã—Å–ª–µ–Ω–∏–µ–º. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∑–∞–±–æ—Ç–æ–π ‚ù§Ô∏è""")

async def feedback_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    lang = user_languages.get(user_id, "lang_ru")
    awaiting_feedback.add(user_id)
    text = "‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤, –∏ —è –µ–≥–æ –ø–æ–ª—É—á—É!" if lang == "lang_ru" else "‚úèÔ∏è Please type your feedback and I will receive it!"
    await update.message.reply_text(text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_input = update.message.text
    user_lang = user_languages.get(user_id, "lang_ru")

    if user_id in awaiting_feedback:
        feedback_text = f"üìù Feedback –æ—Ç @{update.message.from_user.username or update.message.from_user.first_name} (ID {user_id}):\n{user_input}"
        try:
            await context.bot.send_message(chat_id=FEEDBACK_RECEIVER_ID, text=feedback_text)
            reply = "‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ." if user_lang == "lang_ru" else "‚úÖ Thank you! I‚Äôve received your message."
            await update.message.reply_text(reply)
        except:
            error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞." if user_lang == "lang_ru" else "‚ö†Ô∏è Failed to send feedback."
            await update.message.reply_text(error_msg)
        awaiting_feedback.discard(user_id)
        return

    prompt = SYSTEM_PROMPT_RU if user_lang == "lang_ru" else SYSTEM_PROMPT_EN
    history = user_histories.get(user_id, [])
    history.append({"role": "user", "content": user_input})
    messages = [{"role": "system", "content": prompt}] + history[-10:]

    response = ask_openrouter(messages)
    history.append({"role": "assistant", "content": response})
    user_histories[user_id] = history

    await update.message.reply_text(response)

def ask_openrouter(messages):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer " + OPENROUTER_API_KEY,
        "Content-Type": "application/json"
    }
    data = {
        "model": "anthropic/claude-3-haiku",
        "messages": messages
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏."

def main():
    print("üîß main() –∑–∞–ø—É—â–µ–Ω")
    print(f"TOKEN: {'‚úÖ' if TELEGRAM_TOKEN else '‚ùå'}")
    print(f"API KEY: {'‚úÖ' if OPENROUTER_API_KEY else '‚ùå'}")
    print(f"FEEDBACK_RECEIVER_ID: {FEEDBACK_RECEIVER_ID}")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("language", language))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("examples", examples_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about_command))
    app.add_handler(CommandHandler("feedback", feedback_command))
    app.add_handler(CallbackQueryHandler(language_selection))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞—é polling...")
    app.run_polling()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)