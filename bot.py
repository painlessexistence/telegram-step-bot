
import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –ü—Ä–æ–º–ø—Ç—ã
SYSTEM_PROMPT_RU = "–¢—ã —Ç—ë–ø–ª—ã–π, –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ 12 —à–∞–≥–∞–º –ê–Ω–æ–Ω–∏–º–Ω—ã—Ö –ù–∞—Ä–∫–æ–º–∞–Ω–æ–≤. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∞–≥–∞–º, –ø–æ–º–æ–≥–∞–π –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã, –Ω–∞–ø—Ä–∞–≤–ª—è–π, –Ω–æ –Ω–µ —Ä–µ—à–∞–π –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
SYSTEM_PROMPT_EN = "You are a warm, non-intrusive 12-step sponsor bot. Help users think through their steps, offer example formats, ask questions ‚Äî but never solve it for them."

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
GREETING_TEXT_RU = (
    "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ 12 —à–∞–≥–∞–º. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å —à–∞–≥–∏ üòä\n\n"
    "–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ö–∞–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ ... —Ç–æ—á–∫—É –≤ ... —à–∞–≥–µ?\" –∏ —è —Ç–µ–±–µ —Å —ç—Ç–∏–º –ø–æ–º–æ–≥—É."
)
GREETING_TEXT_EN = (
    "Hi, I'm a 12-step sponsor bot here to help you work through the steps. üòä\n\n"
    "You can ask things like: \"What are some answer examples for ... in step ...?\" and I‚Äôll help you."
)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("üá¨üáß English", callback_data='lang_en')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üó£ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Please choose a language:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def language_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data
    user_id = query.from_user.id
    user_languages[user_id] = lang

    if lang == "lang_ru":
        await query.edit_message_text(GREETING_TEXT_RU)
    else:
        await query.edit_message_text(GREETING_TEXT_EN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_lang = user_languages.get(user_id, "lang_ru")
    prompt = SYSTEM_PROMPT_RU if user_lang == "lang_ru" else SYSTEM_PROMPT_EN
    user_input = update.message.text

    gpt_response = ask_openrouter(user_input, prompt)
    await update.message.reply_text(gpt_response)

# –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
def ask_openrouter(user_message, system_prompt):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openchat/openchat-3.5-1210",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_message}
        ]
    }
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏."

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(language_selection))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
